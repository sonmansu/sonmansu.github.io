[ { "title": "[study] 바닐라 자바스크립트 4장", "url": "/posts/study-banila-js-4/", "categories": "Programming, JavaScript", "tags": "javascript, 공부", "date": "2022-08-11 16:43:00 +0900", "snippet": "4.0 Input Values&lt;body&gt; &lt;div id=\"login-form\"&gt; &lt;input type=\"text\" placeholder=\"What is your name?\"&gt; &lt;button&gt;Log In&lt;/button&gt; &lt;/div&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;-index.htmlconst loginForm = document.querySelector(\"#login-form\");const loginInput = loginForm.querySelector(\"input\");const loginButton = loginForm.querySelector(\"button\");function onLoginBtnClick() { // console.dir(loginInput); // input의 내용을 가져오는 property를 찾아보기 위해 출력 console.log(loginInput.value); console.log(\"click!!\");}loginButton.addEventListener(\"click\", onLoginBtnClick);-app.js4.1 Form Submission유효한 username이 입력됐는지 체크해보자.function onLoginBtnClick() { const username = loginInput.value; if(username === \"\") { // 비어있는 경우 alert(\"Please write your name\"); } else if (username.length &gt; 15) { alert(\"Your name is too long.\"); }}위와 같이 JS로 유효성을 확인할 수도 있지만, 브라우저 자체의 기능을 사용할 수도 있다. 그리고 이미 가지고 있는 기능들을 사용하는 게 좋다.HTML파일에서 input에 아래와 같은 속성을 추가로 입력한다.required: 필수 입력 항목으로 만들어줌maxlength=\"15\": 최대 길이를 지정그리고 input의 유효성 검사를 작동시키기 위해서는, input이 form안에 있어야 한다. div를 form으로 수정해주자.&lt;body&gt; &lt;form id=\"login-form\"&gt; &lt;input required maxlength=\"15\" type=\"text\" placeholder=\"What is your name?\" /&gt; &lt;button&gt;Log In&lt;/button&gt; &lt;/form&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;그리고 JS에서는 간단히 username만 출력하자.function onLoginBtnClick() { const username = loginInput.value; console.log(username);}웹페이지를 새로고침하고 확인하자.아무것도 입력하지 않은 체로 Log In버튼을 누르면 아래와 같은 창이 뜬다.그리고 15자 이상으로 입력이 되지 않는 걸 확인할 수 있다.현재 문제는, name 입력 후 Log In을 클릭하면 URL에 ?가 따라 붙고, 페이지가 새로고침 돼서 값이 사라져버린다.이렇게 되는 이유는 form이 submit되고 있기 떄문이다.&lt;form&gt; 안에 있는 &lt;button&gt; 또는 &lt;input type=”submit”&gt; 을 클릭하면 내가 작성한 form이 submit된다. 또는 엔터를 누르면 자동으로 submit 된다. (input이 더 존재하지 않는다면 )우리는 HTML의 도움을 활용하기 위해 (required, maxlength 등..) &lt;input&gt;을 &lt;form&gt;안에 위치시켰다. 그리고 &lt;input&gt;을&lt;form&gt;안에 넣었을 경우 엔터를 누를 때마다 form은 자동적으로 submit되고 있고, form이 submit될 때마다 페이지가 새로고침 된다. 그러나 우리는 웹사이트 전체를 매번 새로고침 하고 싶지 않다.4.2 Events현재 form이 submit되는 것에 관심이 있다. submit은 엔터를 누르거나 버튼을 클릭할 때 발생한다.submit이라는 event가 발생하는 걸 아예 막거나, 중간에 개입해보기 위해 submit event를 listen하자.const loginForm = document.querySelector(\"#login-form\");const loginInput = loginForm.querySelector(\"input\");function onLoginSubmit() {    const username = loginInput.value;    console.log(username);}loginForm.addEventListener(\"submit\", onLoginSubmit);-app.js아래 코드는 누군가 form을 submit하면 JS가 onLoginSubmit 함수를 호출하도록 하고 있다.loginForm.addEventListener(\"submit\", onLoginSubmit);이때, JS는 해당 함수를 onLoginSubmit()로 호출하지 않고, 함수의 첫 번째 argument로, 발생한 event에 대한 정보를 담은 object을 전달한다.모든 EventListener function의 첫 번째 argument는 항상 지금 막 벌어진 일들에 대한 정보가 된다.해당 정보를 출력해보자. argument의 이름은 tomato로 짓던, info로 짓던 상관 없다. (보통 event라고 작성하는게 관행이다)preventDefault 함수는 어떤 event의 기본 행동이 발생되지 않도록 막는다.여기서 기본 행동이란 어떤 function에 대해 브라우저가 기본적으로 수행하는 동작이다. 누군가 form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 프로그래밍 되어있다. 그 기본 동작을 막고 있는 것이다.const loginForm = document.querySelector(\"#login-form\");const loginInput = loginForm.querySelector(\"input\");function onLoginSubmit(event) {    event.preventDefault(); // 브라우저의 기본 동작을 막음    console.log(event);}loginForm.addEventListener(\"submit\", onLoginSubmit);-app.js여기 있는 것들이 방금 실행된 event에 대한 여러 정보들이다.4.3 Events part Twoform에 관련한 요소들을 배우자.&lt;body&gt;\t&lt;a href=\"https://nomadcoders.co\"&gt;Go to courses&lt;/a&gt;&lt;/body&gt;이전 영상에서 form의 기본 동작은 submit이라는 걸 배웠다.링크의 기본 동작은 클릭 시 다른 페이지로 이동하는 것이다. 이 기본 동작을 막아볼 것이다.const link = document.querySelector(\"a\");function handleLinkClick() { alert(\"clicked\"); // &lt;--- JS의 동작이 멈춘다}link.addEventListener(\"click\", handleLinkClick);웹페이지를 새로고침 후 실행해본다.링크를 클릭하면 alert창이 뜬다. 확인 버튼을 눌러서 alert가 없어지면 브라우저의 기본 동작이 실행된다.방금 일어난 event에 대한 정보를 담은 object이 EventListener 함수의 첫번째 인자로 주어지게 될 것이다. 해당 argument를 받아서 출력해보자const link = document.querySelector(\"a\");function handleLinkClick(event) { console.log(event); alert(\"clicked\"); // &lt;--- JS의 동작이 멈춘다}link.addEventListener(\"click\", handleLinkClick);아까 전에는 SubmitEvent가 출력됐는데, 이번에는 PointerEvent가 출력됐다. 이는 event의 종류가 다양하기 때문이다.(니꼬는 MouseEvent가 뜬다. 이는 브라우저나 OS가 다르기 때문이라고 한다.)기본 동작을 막고 event 내부를 출력하자.const link = document.querySelector(\"a\");function handleLinkClick(event) { event.preventDefault(); // 브라우저의 기본 동작을 막는다. console.dir(event);}link.addEventListener(\"click\", handleLinkClick);4.4 Getting Username유저가 이름을 제출하면 form 자체가 사라지도록 할 것이다.이를 구현하기 위해선, HTML 요소 자체를 없애는 방법과 CSS를 이용해서 숨기는 방법이 있다.style.css에 hidden 클래스를 만든다.어떤 요소에게든 이 classname을 주면 그 요소를 숨기게 될 거다..hidden { display: none;}-style.cssconst loginForm = document.querySelector(\"#login-form\");const loginInput = loginForm.querySelector(\"input\");function onLoginSubmit(event) { event.preventDefault(); // 브라우저의 기본 동작을 막음 const username = loginInput.value; loginForm.classList.add(\"hidden\"); // form 요소를 숨김 console.log(username);}loginForm.addEventListener(\"submit\", onLoginSubmit);-app.js완성 코드&lt;!DOCTYPE html&gt;&lt;html lang=\"kr\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;link rel=\"stylesheet\" href=\"style.css\"&gt; &lt;title&gt;Momentum&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form id=\"login-form\"&gt; &lt;input required maxlength=\"15\" type=\"text\" placeholder=\"What is your name?\" /&gt; &lt;button&gt;Log In&lt;/button&gt; &lt;/form&gt; &lt;h1 id=\"greeting\" class=\"hidden\"&gt;&lt;/h1&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;-index.htmlconst loginForm = document.querySelector(\"#login-form\");const loginInput = loginForm.querySelector(\"input\");const greeting = document.querySelector(\"#greeting\");const HIDDEN_CLASSNAME = \"hidden\"; // 일반적으로 string을 저장하는 변수는 대문자로 표기function onLoginSubmit(event) { event.preventDefault(); // 브라우저의 기본 동작을 막음 loginForm.classList.add(HIDDEN_CLASSNAME); // hihdden class name을 더해서 form 요소를 숨김 const username = loginInput.value; // 유저의 이름을 변수로 저장 greeting.innerText = `Hello ${username}`; // \"Hello \" + username 대신 백틱 사용하는 것이 편함 greeting.classList.remove(HIDDEN_CLASSNAME);}loginForm.addEventListener(\"submit\", onLoginSubmit);-app.js현재 문제는 우리가 유저를 전혀 기억할 수 없다는 것이다. 새로고침할 때마다 새로 로그인 해줘야 한다. 새로고침해도 이름이 저장되어있음 좋겠다.4.5 Saving Username" }, { "title": "[study] 바닐라 자바스크립트 3장", "url": "/posts/study-banila-js-3/", "categories": "Programming, JavaScript", "tags": "javascript, 공부", "date": "2022-08-10 19:41:00 +0900", "snippet": "３.0 The Document Object３.1 HTML in Javascript HTML 코드와 HTML element를 Javascript로 접근하는 방법을 배워보자.console창에 다음을 입력해보자.document.getElementById(\"title\")JavaScript로 id = “title”을 가진 &lt;h1&gt; 태그를 가져온다.이를 console창에 하지말고 app.js 파일에서 호출해보자.괄호 안에는 element의 id를 써야하는데, 보다시피 string이어야 한다.const title = document.getElementById(\"title\");console.log(title);console.log() 대신, element를 더 자세하게 보여주는 console.dir()을 사용해보자.const title = document.getElementById(\"title\");console.dir(title);h1태그 하나에서 가져올 수 있는 것들이 이렇게나 많다.여기서 특별히 중요한 것은 textContent 같은 것이다이 모든 것들은 HTML에 표현될 수 있다.예를 들어 autofocus: false를 알아보자.&lt;body&gt; &lt;h1 autofocus id=\"title\"&gt;Grab me!&lt;/h1&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;h1&gt; 태그 내부에 autofocus 를 추가하면 된다.웹페이지를 새로고침해보면 autofocus가 true로 바뀐걸 확인할 수 있다.３.2 Searching For ElementsgetElementById() 함수를 이전시간에 배웠다. 하지만 니꼬는 이 함수를 자주 쓰지 않는다. 그래서 이번엔 class 명을 사용하는 방법을 배워보자.&lt;body&gt; &lt;h1 class=\"hello\"&gt;Grab me!&lt;/h1&gt; &lt;h1 class=\"hello\"&gt;Grab me!&lt;/h1&gt; &lt;h1 class=\"hello\"&gt;Grab me!&lt;/h1&gt; &lt;h1 class=\"hello\"&gt;Grab me!&lt;/h1&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;const hellos = document.getElementsByClassName(\"hello\");console.log(hellos);h1이 들어있는 배열이 출력된다.&lt;body&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;Grab me!&lt;/h1&gt; &lt;/div&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;위와 같이 된 경우 h1 태그를 가져와보자const title = document.getElementsByTagName(\"h1\");console.log(title);h1이 하나만 들어있는 array가 나왔다.니꼬 기준에서 element를 가지고 오는 가장 멋진 방법은querySelector과 querySelectorAll이라고 한다.querySelector는 element를 CSS 방식으로 검색할 수 있다.아래는 CSS selector를 사용해 hello라는 class를 찾고, 그 안에 있는 h1을 가져오는 명령어이다.const title = document.querySelector(\".hello h1\")console.log(title);hello h1이 여러개인 경우&lt;body&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;Grab me1!&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;Grab me2!&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"hello\"&gt; &lt;h1&gt;Grab me3!&lt;/h1&gt; &lt;/div&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;첫 번째것만 나온다.selector안의 조건에 부합하는 모든 element를 갖고오고 싶은 경우 querySelectorAll 명령어를 사용한다.const title = document.querySelectorAll(\".hello h1\")console.log(title);세 개의 h1이 들어있는 array가 출력된다.이 강의의 99%는 querySelector를 이용한다.만약에 id를 통해 찾고 싶다고 하더라도, #를 붙이면 querySelector를 활용해서 찾을 수 있다.const title = document.querySelector(\"#hello\")const title = document.getElementById(\"hello\")두 코드는 같은 역할을 한다.３.3 Eventsindex.html 파일에서 app.js를 import했기 때문에javascript를 통해 HTML의 내용을 가져올 수 있는 것이다.import를 하지 않았다면, app.js의 document는 존재할 수도 없었다.포인트는, HTML이 app.js를 load하기 때문에 존재하는 것이라는 거다. 그 다음에 browser가 우리가 document에 접근할 수 있게 해준다.click event를 listen하고, 이 click event가 발생하면 특정 function이 동작하도록 해보자.function을 실행시키고 싶으면 함수명 옆에 ()괄호를 붙여야 했었다.하지만 지금은 함수를 곧바로 실행시키고 싶은 것이 아니다.function을 javascript에 넘겨주고, 유저가 title을 click할 경우 javascript가 대신 실행시키길 바라는 것이다. 내가 직접 실행시키지 않고(괄호를 붙이지 않고), javascript에 function name만을 넘겨준다.const title = document.querySelector(\".hello h1\")function handleTitleClick() { console.log(\"title was clicked!\");}title.addEventListener(\"click\", handleTitleClick) // 어떤 event를 listen할지 지정, 해당 event가 발생했을때 어떤 함수를 실행할지 지정h1 태그 부분을 클릭하면 콘솔 창에 문자가 출력되는 것을 볼 수 있다.３.4 Events part Twolisten하고 싶은 event를 찾는 가장 좋은 방법:찾고 싶은 element의 이름 + html element mdn 으로 구글에 검색한다.Web APIs 라는 문장이 포함된 링크를 찾는다. (이게 javascript 관점에서 쓴 글이다)HTMLHeadingElement는 HTMLElement이기 때문에 HTMLElement를 클릭한다스크롤을 내려보면 Events 들을 볼 수 있다.또는 console.dir()로 element를 console에 출력시켜서 볼 수 있다.const title = document.querySelector(\".hello h1\")console.dir(title);많은 property들을 볼 수 있는데, 이름 앞에 on이 붙어 있는 것이 event listener이다.이 event를 사용할 때는 onmousedown 대신 mousedown으로 사용한다.마우스에 관련된 이벤트 리스너를 몇 개 더 추가해보자.const title = document.querySelector(\".hello h1\")function handleTitleClick() { title.style.color = \"blue\";}function handleMouseEnter() { title.innerText = \"Mouse is here!\";}function handleMouseLeave() { title.innerText = \"Mouse is gone!\";}title.addEventListener(\"click\", handleTitleClick);title.addEventListener(\"mouseenter\", handleMouseEnter);title.addEventListener(\"mouseleave\", handleMouseLeave);３.5 More Eventsevent를 사용하는 데에는 기본적으로 두 가지 방법이 있다.title.addEventListener(\"click\", handleTitleClick); // 1. title.onclick = handleTitleClick; // 2.둘 다 같은 동작을 한다.니꼬가 addEventListener를 더 선호하는 이유는 나중에 removeEventListener를 통해 eventListener를 제거할 수 있기 때문이다.window의 event를 listen 해보자.https://developer.mozilla.org/ko/docs/Web/API/Window#%EC%9D%B4%EB%B2%A4%ED%8A%B8위 링크에서 window에 대한 event를 볼 수 있다.니꼬는 resize 이벤트를 좋아한다고 한다. 이 event를 listen 해보자.JS에서 document가 기본적으로 제공되듯이, window도 기본적으로 제공된다.function handleWindowResize() { document.body.style.backgroundColor = \"tomato\";}window.addEventListener(\"resize\", handleWindowResize);document의 body를 출력해볼 수 있다.document의 body, head, title 이런 것들은 중요하기 때문에 이렇게 출력해볼 수 있다.대신 나머지 element들은 (div, h1.. 등등) querySelector나 getElementById등으로 찾아와야 한다.이번엔 clipboard events의 copy event를 listen해보자.function handleWindowCopy() { alert(\"copier!\");}window.addEventListener(\"copy\", handleWindowCopy);새로고침 후 ctrl + c 를 눌러보면 alert창이 뜨는 걸 볼 수 있다.이번엔 wifi에 관련된 event를 써보자.function handleWindowOffline() { alert(\"SOS no WIFI\");}function handleWindowOnline() { alert(\"ALL GOOD\");}window.addEventListener(\"offline\", handleWindowOffline);window.addEventListener(\"online\", handleWindowOnline);(난 왜 안되지..?)３.6 CSS in Javascriptconst h1 = document.querySelector(\".hello h1\")function handleTitleClick() { if (h1.style.color === \"blue\") { h1.style.color = \"tomato\"; } else { h1.style.color = \"blue\"; }}h1.onclick = handleTitleClick;클릭할 때 마다 색깔이 바뀌는 위 코드를 개선해보자.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { const currentColor = h1.style.color; let newColor; if (currentColor === \"blue\") { newColor = \"tomato\"; } else { newColor = \"blue\"; } h1.style.color = newColor;}h1.onclick = handleTitleClick;하지만 element의 style을 JS에서 변경하는 건 별로 좋지 않다.３.7 CSS in Javascript part Twostyle 작업에 적합한 도구는 CSS이다.JS에는 색깔 이름을 사용하지 않을 거고 style이름도 적지 않을 거다.style은 CSS 파일에 적자.아래 코드는 h1 태그를 파란색으로 만든다.body { background-color: beige;}h1 { color: blue;}아래에 active 클래스 생성하자. 이 클래스를 어떤 element에 지정해주면 tomato 색이 될 것이다..active { color: tomato;}JS에서 h1에 active class를 전달해주자.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { h1.className = \"active\";}h1.onclick = handleTitleClick;이제 JS가 CSS에게 직접 대화하지 않게 되었다.JS는 HTML을 변경한다.클릭시 active class가 된다.다시 클릭하면 class 를 없앰으로써 아까와 같은 동작을 구현해보자.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { if(h1.className == \"active\") { h1.className = \"\"; // className을 비움 } else { h1.className = \"active\"; }}h1.onclick = handleTitleClick;h1에 굉장히 멋진 transition을 추가해보자.body { background-color: beige;}h1 { color: blue; transition: color .5s ease-in-out;}.active { color: tomato;}JS 코드를 개선해보자.현재 “active”란 string을 두 번 사용하고 있다. 이는 error의 소지를 갖고 있다.clickedClass라는 constant를 생성해주자. string을 변수에 저장하는 건 아주 유용하다.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { const clickedClass = \"active\"; if(h1.className == clickedClass) { h1.className = \"\"; // className을 비움 } else { h1.className = clickedClass; }}h1.onclick = handleTitleClick;현재 JS 코드에 버그의 소지가 하나 더 있다.만약 h1 태그에 class가 이미 적용돼있었다면? (ex: font를 적용해놓은 class)현재 JS 코드는 class name을 교체(replace)해버리기 때문에 적용해놓은 class가 사라진다.우리는 기존에 있던 class name을 유지해야 한다.３.8 CSS in Javascript part Threeclass name을 바꾸는 다른 방법을 배워보자: classList를 사용하는 방법이다.https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenListclassList에 적용할 수 있는 method들은 위 주소에서 확인할 수 있다.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { const clickedClass = \"active\"; if(h1.classList.contains(clickedClass)) { // clickedClass가 포함돼있는지 확인 h1.classList.remove(clickedClass); } else { h1.classList.add(clickedClass); }}h1.onclick = handleTitleClick;위 코드 대신 더 간단한 toggle()함수를 써보자.toggle()은 class name이 존재하는지 확인하고, 존재한다면 class name을 제거한다. 존재하지 않는다면 class name을 추가한다.const h1 = document.querySelector(\".hello h1\")function handleTitleClick() { // const clickedClass = \"active\"; // if(h1.classList.contains(clickedClass)) { // clickedClass가 포함돼있는지 확인 // h1.classList.remove(clickedClass); // } else { // h1.classList.add(clickedClass); // } h1.classList.toggle(\"active\");}h1.onclick = handleTitleClick;단 한 줄의 코드로 이전의 코드를 대체할 수 있다." }, { "title": "[study] 바닐라 자바스크립트 2장", "url": "/posts/study-banila-js-2/", "categories": "Programming, JavaScript", "tags": "javascript, 공부", "date": "2022-08-08 01:41:00 +0900", "snippet": "２. WELCOME TO JAVASCRIPT 다시보기 2.0 , 2.6 다시 안봐도 될것 2.1 2.2 ２.1 Basic Data Types가장 기본적인 데이터 타입: 문자(string), 숫자(integer, float) 존재２.2 Variables 어떻게 값을 variable에 저장하고 사용하는지를 배운다.console.log(4545); : 괄호 안의 것을 console에 log(또는 print) 하는 것자바스크립트에서의 변수명 짓는 관례: camelCase (ex: const veryLongVariableName = 3)&lt;-&gt; 파이썬에서의 변수명 짓는 관례: snake_case (ex: very_long_variable_name = 3)２.3 const and let자바스크립트에는 변수를 만드는 방법이 2가지 존재함: let, const const: 상수, 값을 변경 불가능 let: 변할 수 있는 변수 기본적으로 const를 사용하고, 만약 변수를 업데이트하고 싶다면 let을 씀var은 절대 사용하지 말 것２.4 Booleanstrue, false 두개 존재const amIFat = false;console.log(amIFat);그 외 false 와 헷갈릴만한 data type들const amIFat = null; // 값이 null이고, null은 아무것도 없음을 의미let something; // 변수는 존재하나 값이 들어가지 않음console.log(something); // undefined null: 값이 “비어있음”을 표현하기 위해 사용, 절대 자연적으로 발생하지 않음. variable안에 어떤 것이 없다는 것을 확실히 하기 위해 사용함. false: false라는 값이 들어 있음 undefined: 변수에 값을 부여하지 않은 상태２.5 Arraysconst nonsense = [1, 2, \"hello\", false, null, true, undefined];const daysOfWeek = [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];console.log(daysOfWeek);// Get Item from Arrayconsole.log(daysOfWeek[5]); // satdaysOfWeek[1] = \"MON\"; // 값 업데이트// Add one more day to the arraydaysOfWeek.push(\"sun\");console.log(daysOfWeek);２.6 Objects배열은 같은 종류(type)들을 저장할 때 사용함 (ex: 한 주의 요일들을 저장)object은 연관되어 있는 property 들을 그룹으로 묶어서 저장해야 할 떄 사용함const playerName = \"nico\";const playerPoints = 121212; const player = {    name: \"nico\", // property    points: 10,    fat: true,} console.log(player); /* 값 조회 */console.log(player.name);console.log(player[\"name\"]); // 위와 같은 결과/* 값 수정 */player.fat = false; // const 안의 값을 업데이트 하는 것은 문제 없음// player = false // const 전체를 업데이트할 때 에러 발생player.points = player.points + 15;console.log(player);/* 값 추가 */player.lastName = \"potato\"console.log(player);２.7 Functions part Onefunction sayHello() {    console.log(\"Hello my name is C!\");}sayHello(); // 함수 실행２.8 Functions part Two function에 argument 전달하는 법을 배운다.function sayHello(nameOfPerson, age) { // function이 데이터를 받는 방법    console.log(\"Hello my name is \" + nameOfPerson + \" and I'm \" + age);}sayHello(\"nico\", 10); // 데이터를 function 안으로 보냄function plus(a, b) { // argument의 이름은 마음대로 지어도됨    console.log(a + b);    // 변수 a, b는 이 function 블록 내부에서만 존재함}// console.log (a + b); // function 블럭 외부에서 접근할 시 에러 발생 plus(); // NaN (Not a Number), argument를 전달하지 않아도 실행은 됨plus(8, 60); // a에 8이 들어가고 b에 60이 들어감 (변수 전달 순서가 중요) function divide(a, b) {    console.log(a / b);}divide(98, 20);function minusFive(potato) {\tconsole.log(potato - 5);}minusFive(5, 10, 12, 34); // 5위 function이 오직 첫 번째 argument만 받지만, 많은 argument를 보내도 문제가 되지 않음.function sayHello() {}const player = {    name: \"nico\",    // object 내부에 function 선언할 땐 외부에서 선언할 때와 모양이 살짝 다름    sayHello: function(otherPersonName) {        console.log(\"hello! \" + otherPersonName);    },};console.log(player.name);player.sayHello(\"lynn\");２.9 Recap２.11 Returns앞으론 어떤 작업을 처리하고 그 작업의 결과를 return 하기 위해 function을 사용할 것임const age = 96;function calculateKrAge(ageOfForeigner) {    return ageOfForeigner + 2;}const krAge = calculateKrAge(age);console.log(krAge);２.13 Conditionalsprompt()는 사용자에게 창을 띄울 수 있는 함수이다.const age = prompt(\"How old are you?\");console.log(age);실행시켜보면 페이지가 계속 로딩하는 것처럼 보이고, console에는 아무것도 출력되지 않는다.이 페이지는 javascript를 일시정지 시키고 있는 것이다.const age = prompt(\"How old are you?\"); // &lt;---javascript가 여기서 멈춰있다console.log(age);prompt function을 더 이상 사용하지 않는 이유는 자바스크립트 코드의 실행을 멈추게 하기 때문이다.추가로 CSS를 적용시킬 수가 없다.이는 아주아주 오래된 방법이다.요즘에는 대부분이 HTML, CSS로 만든 자신만의 창을 사용한다.변수의 type을 보려면 typeof 키워드를 사용한다.const age = prompt(\"How old are you?\"); // &lt;---javascript가 여기서 멈춰있다console.log(age);console.log(typeof age); // stringparseInt() 함수로 string을 number로 변환한다.숫자가 아닌 문자를 입력하면 NaN(Not A Number)이 출력된다console.log(typeof \"15\", typeof parseInt(\"15\")); // string numberconst age = prompt(\"How old are you?\"); // &lt;---javascript가 여기서 멈춰있다console.log(age, parseInt(age));２.14 Conditionals part TwoinsNaN(): NaN인지 검사하는 함수, boolean을 return한다.문자를 입력할 경우 Not A Number이므로 true가 반환된다.조건문을 배워보자.if(condition) {    // condition === true 일 경우 실행되는 코드 블럭} else {    // condition === false 일 경우 실행되는 코드 블럭}condition(조건) 자리에는 boolean(true 또는 false)이 들어가야 한다.isNaN()함수가 boolean을 반환하므로 condition 자리에 넣어보자.const age = parseInt(prompt(\"How old are you?\"));if(isNaN(age)) {    console.log(\"Please write a number\")} // else문은 optional２.15 Conditionals part Threeelse if로 더 많은 conditon을 체크해보자.&amp;&amp;(AND 연산자): 두 조건이 모두 true여야 true가 된다||(OR 연산자): 두 조건 중 하나만 true여도 true가 된다const age = parseInt(prompt(\"How old are you?\"));if(isNaN(age) || age &lt; 0) {    console.log(\"Please write a real positive number\");} else if(age &lt; 18) {    console.log(\"You are too young.\");} else if(age &gt;= 18 &amp;&amp; age &lt;= 50) { // AND 연산자    console.log(\"You can drink\");} else if(age &gt; 50 &amp;&amp; age &lt;= 80) {    console.log(\"You should exercise\");} else if(age &gt; 80) {    console.log(\"You can do whatever you want.\");}２.16 Recap특별한 나이 100살인 경우를 따로 조사해보자.const age = parseInt(prompt(\"How old are you?\"));if(isNaN(age) || age &lt; 0) {    console.log(\"Please write a real positive number\");} else if(age &lt; 18) {    console.log(\"You are too young.\");} else if(age &gt;= 18 &amp;&amp; age &lt;= 50) { // AND 연산자    console.log(\"You can drink\");} else if(age &gt; 50 &amp;&amp; age &lt;= 80) {    console.log(\"You should exercise\");} else if(age &gt; 80) {    console.log(\"You can do whatever you want.\");} else if(age === 100) { // 이 조건은 절대 실행되지 않는다    console.log(\"wow you are wise\");}위와 같이 작성하면 age가 80이상이기만 하면 12번째 줄이 실행되고 끝나기 때문에age가 100인지 체크하는 13번째 줄은 실행되지 않는다.적는 순서에 관해 잘 생각해 보아야 한다. age가 100인지를 먼저 체크하도록 하자.const age = parseInt(prompt(\"How old are you?\"));if(isNaN(age) || age &lt; 0) {    console.log(\"Please write a real positive number\");} else if(age &lt; 18) {    console.log(\"You are too young.\");} else if(age &gt;= 18 &amp;&amp; age &lt;= 50) { // AND 연산자    console.log(\"You can drink\");} else if(age &gt; 50 &amp;&amp; age &lt;= 80) {    console.log(\"You should exercise\");} else if(age === 100) { // 이 조건은 절대 실행되지 않는다    console.log(\"wow you are wise\");} else if(age &gt; 80) {    console.log(\"You can do whatever you want.\");}" }, { "title": "(정리)벨로퍼트와 함께하는 모던 자바스크립트", "url": "/posts/%EC%A0%95%EB%A6%AC-%EB%B2%A8%EB%A1%9C%ED%8D%BC%ED%8A%B8%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/", "categories": "Programming, JavaScript", "tags": "javascript, 정리", "date": "2022-08-06 01:33:00 +0900", "snippet": "//# 자바스크립트 입문벨로퍼트와 함께하는 모던 자바스크립트 링크５. 함수５.１ 일반 함수function add(a, b) { return a + b;}const sum = add(1, 2);console.log(sum);함수를 만들 때는 function 키워드를 사용하며, 함수에서 어떤 값을 받아올지 정해주는데 이를 파라미터(매개변수)라고 부름.함수 내부에서 return 키워드를 사용하여 함수의 결과물을 지정 가능연습name 이라는 파라미터를 넣으면 콘솔에 ‘Hello name!’ 이라는 결과를 출력하는 코드를 작성해보자.function hello(name) { console.log(`Hello ${name}!`);}hello('Mike'); // \"Hello Mike!\"５.２ 화살표 함수const add = (a, b) =&gt; { return a + b;};console.log(add(1, 2));function 키워드 대신에 =&gt; 문자를 사용해서 함수를 구현함화살표의 좌측에는 함수의 파라미터, 화살표의 우측에는 코드 블록이 들어옴위와 같이 코드 블록 내부에서 바로 return 을 하는 경우는 다음과 같이 줄여서 쓸 수 있음const add = (a, b) =&gt; a + b;console.log(add(1, 2));６. 객체６.１ 객체 선언const dog = { name: '멍멍이', age: 2};console.log(dog.name); // 멍멍이console.log(dog.age); // 2객체 선언 시{ } 안에 원하는 값들을 넣어줌.값은 키: 원하는 값 형태로 넣고,키에 해당하는 부분은 공백이 없어야함. 공백이 있어야 하는 경우, 따옴표로 감싸서 문자열로 넣어줌const sample = { 'key with space': true};６.２ 함수에서 객체를 파라미터로 받기객체를 파라미터로 받아와서 사용해보자.const ironMan = { name: '토니 스타크', actor: '로버트 다우니 주니어', alias: '아이언맨'};function print(hero) { const text = `${hero.alias}(${hero.name}) 역할을 맡은 배우는 ${hero.actor} 이다.`; console.log(text);}print(ironMan); // \"아이언맨(토니 스타크) 역할을 맡은 배우는 로버트 다우니 주니어 이다.\"６.３ 객체 비구조화 할당print 함수에서 hero 내부의 값을 조회 할 때 마다 hero. 를 입력하고 있는데, 객체 비구조화 할당이라는 문법을 사용하면 코드를 더욱 짧고 보기 좋게 작성 할 수 있음const ironMan = { name: '토니 스타크', actor: '로버트 다우니 주니어', alias: '아이언맨'};function print(hero) { const { alias, name, actor } = hero; // [객체 비구조화 할당] 객체에서 값들을 추출해서 새로운 상수로 선언함 const text = `${alias}(${name}) 역할을 맡은 배우는 ${actor} 이다.`; console.log(text);}print(ironMan); // \"아이언맨(토니 스타크) 역할을 맡은 배우는 로버트 다우니 주니어 이다.\"여기서 더 나아가, 파라미터 단계에서 객체 비구조화 할당을 할 수도 있음const ironMan = { name: '토니 스타크', actor: '로버트 다우니 주니어', alias: '아이언맨'};function print({ alias, name, actor }) { // 객체 비구조화 할당 const text = `${alias}(${name}) 역할을 맡은 배우는 ${actor} 이다.`; console.log(text);}print(ironMan);６.４ 객체 안에 함수 넣기const dog = { name: '강아지', sound: '멍멍', say: function bark() { console.log(this.sound); // this: 자신이 속한 객체를 가르킴 }, say2: function() { // 함수 이름 없이 선언 가능 console.log(this.sound); }};dog.say(); // 멍멍dog.say2(); // 멍멍객체 안에 함수를 넣을 때, 화살표 함수로 선언한다면 제대로 작동하지 않음.이유는, function 으로 선언한 함수는 this 가 제대로 자신이 속한 객체를 가르키게 되는데, 화살표 함수는 그렇지 않기 때문６.５ Getter 함수와 Setter 함수const numbers = { a: 1, b: 2, get sum() { console.log('sum 함수 실행!'); return this.a + this.b; }};console.log(numbers.sum);\"sum 함수 실행!\"3 numbers.sum() 을 한 것이 아니라 number.sum 을 조회했을 뿐인데, 함수가 실행되고 그 결과값이 출력됨const numbers = { _a: 1, get a() { return this._a; }, set a(value) { console.log('a 값을 변경'); this._a = value; }};numbers.a = 7; // setter 함수의 파라미터로 5를 전달console.log(numbers.a); // getter 함수로 값 조회Setter 함수를 설정 할 때에는 함수의 앞부분에 set 키워드를 붙임Setter 함수를 설정하고 나면, numbers.a = 5 이렇게 값을 설정했을 때 5 를 함수의 파라미터로 받아오게 됨６.６ 객체의 정보를 배열 형태로 받아오는 함수const doggy = { name: '멍멍이', sound: '멍멍', age: 2};console.log(Object.entries(doggy));console.log(Object.keys(doggy));console.log(Object.values(doggy));각 함수의 역할은 다음과 같음 Object.entries: [[키, 값], [키, 값]] 형태의 배열로 변환 Object.keys: [키, 키, 키] 형태의 배열로 변환 Object.values: [값, 값, 값] 형태의 배열로 변환７. 배열７.１ 배열 선언 및 조회 배열 선언시 [ ] 로 감싸줌 const array = [1, 2, 3, 4, 5]; // 숫자 배열const objects = [{ name: '멍멍'}, { name: '야옹' }]; // 객체 배열 1 번째 항목 조회 console.log(objects[1]); 예제 const objects = [{ name: '멍멍이' }, { name: '야옹이' }];console.log(objects);console.log(objects[0]);console.log(objects[1]); ７.２ 배열에 새 항목 추가 - push배열의 내장 함수인 push 함수를 사용함const objects = [{ name: '멍멍이' }, { name: '야옹이' }];objects.push({ name: '용가리'});console.log(objects);７.３ 배열의 크기 - lengthconst objects = [{ name: '멍멍이' }, { name: '야옹이' }];console.log(objects.length); // 2８. 반복문８.１ forfor (let i = 0; i &lt; 10; i++) { console.log(i);}배열과 forconst names = ['멍멍이', '야옹이', '멍뭉이'];for (let i = 0; i &lt; names.length; i++) { console.log(names[i]);}８.２ whilelet i = 0;while (i &lt; 10) { console.log(i); i++;}８.３ 배열을 위한 반복문 for…offor...of문은 배열에 관한 반복문을 돌리기 위해서 만들어진 반복문임. 사실 이 구문은 배워놔도 사용 할 일이 별로 없습니다. 보통 배열을 반복할때에는 배열의 내장함수를 많이 사용합니다. 그래도 알아는 둡시다.let numbers = [10, 20, 30, 40, 50];for (let number of numbers) { console.log(number);}1020304050８.４ 객체를 위한 반복문 for…inconst doggy = { name: '멍멍이', sound: '멍멍', age: 2};for (let key in doggy) { console.log(`${key}: ${doggy[key]}`);}８.５ break 와 continuefor (let i = 0; i &lt; 10; i++ ) { if (i === 2) continue; // 다음 루프를 실행 console.log(i); if (i ===5) break; // 반복문을 끝내기}1345９. 배열 내장함수배열을 다룰 때 알고있으면 너무나 유용한 다양한 내장 함수들을 알아보겠음９.１ forEachconst heroes = ['아이언맨', '캡틴 아메리카', '토르', '닥터 스트레인지'];/* for문으로 배열의 원소들을 출력 */for (let i = 0; i &lt; heroes.length; i++) { console.log(heroes[i])}/* 위 동작을 forEach 함수로 구현 */heroes.forEach(hero =&gt; { console.log(hero);});forEach 함수의 파라미터로는, 각 원소에 대하여 처리하고 싶은 코드를 함수로 넣음.이 함수의 파라미터 hero는 각 원소를 가르키게 됨９.２ mapmap 은 배열 안의 각 원소를 변환 할 때 사용 되며, 이 과정에서 새로운 배열이 만들어짐배열 안의 모든 숫자를 제곱해서 새로운 배열을 만들고 싶은 경우const array = [1, 2, 3, 4, 5, 6, 7, 8];const squared = [];/* 1. 기본적인 방식 */for (let i = 0; i &lt; array.length; i++) { squared.push(array[i] * array[i]);}/* 2. 위 동작을 forEach 함수로 구현 */array.forEach(n =&gt; { squared.push(n * n);})/* 3. 위 동작을 map 함수로 구현 */const squareFunc = n =&gt; n * n; // 변화함수const squared = array.map(square); // 변화함수를 매개변수로 전달map 함수의 파라미터로 변화를 주는 함수(변화함수)를 전달함.현재 변화함수 square는 파라미터 n 을 받아와서 이를 제곱해줌.map 함수에 변화함수를 사용함으로서 새로운 배열을 생성했음.변화 함수를 꼭 이름을 붙여서 선언 할 필요는 없음. 다음과 같이 작성해도 됨const squared = array.map(n =&gt; n * n);console.log(squared);９.３ indexOfindexOf: 원하는 항목이 몇번째 원소인지 찾아주는 함수const superheroes = ['아이언맨', '캡틴 아메리카', '토르', '닥터 스트레인지'];const index = superheroes.indexOf('토르');console.log(index); // 2９.４ findIndex배열 안에 있는 값이 객체이거나, 배열이라면 indexOf 로 찾을 수 없음.예를 들어 다음과 같은 배열이 있을 때,const todos = [ { id: 1, text: '자바스크립트 입문', done: true }, { id: 2, text: '함수 배우기', done: true }, { id: 3, text: '객체와 배열 배우기', done: true }, { id: 4, text: '배열 내장함수 배우기', done: false }];여기서 만약 id 가 3 인 객체가 몇번째인지 찾으러면, findIndex 함수에 검사하고자 하는 조건을 반환하는 함수를 넣어서 찾을 수 있음const todos = [ { id: 1, text: '자바스크립트 입문', done: true }, { id: 2, text: '함수 배우기', done: true }, { id: 3, text: '객체와 배열 배우기', done: true }, { id: 4, text: '배열 내장함수 배우기', done: false }];const index = todos.findIndex(todo =&gt; todo.id == 3);console.log(index); // 2９.５ findfind 함수는 findIndex 랑 비슷한데, 찾아낸 값이 몇번째인지 알아내는 것이 아니라, 찾아낸 값 자체를 반환함const todos = [ { id: 1, text: '자바스크립트 입문', done: true }, { id: 2, text: '함수 배우기', done: true }, { id: 3, text: '객체와 배열 배우기', done: true }, { id: 4, text: '배열 내장함수 배우기', done: false }];const index = todos.find(todo =&gt; todo.id == 3);console.log(index); // 2{id: 3, text: \"객체와 배열 배우기\", done: true}９.６ filterfilter 함수는 배열에서 특정 조건을 만족하는 값들만 따로 추출하여 새로운 배열을 만듦.파라미터로 조건을 검사하는 함수를 넣어줌예)  todos 배열에서 done 값이 false 인 항목들만 따로 추출해서 새로운 배열 만들기const todos = [ { id: 1, text: '자바스크립트 입문', done: true }, { id: 2, text: '함수 배우기', done: true }, { id: 3, text: '객체와 배열 배우기', done: true }, { id: 4, text: '배열 내장함수 배우기', done: false }];const taskNotDone = todos.filter(todo =&gt; todo.done === false);console.log(taskNotDone);[ { id: 4, text: '배열 내장 함수 배우기', done: false }];９.７ splicesplice는  배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가할 때 사용\t- 첫 번째 파라미터: 어떤 인덱스부터 지울지를 의미\t- 두 번째 파라미터: 그 인덱스부터 몇개를 지울지를 의미 ex) 배열에서 30을 지우는 예 const numbers = [10, 20, 30, 40];const index = numbers.indexOf(30); // 먼저 30이 몇 번째 index인지 알아냄 numbers.splice(index, 1); // 해당 인덱스부터 1개를 제거console.log(numbers); [10, 20, 40] ex) 2번 index에 100을 추가 const numbers = [10, 20, 30, 40];numbers.splice(2, 0, 100);console.log(numbers); [10,20,100,30,40] ９.８ sliceslice 는 splice와 비슷하게 배열을 잘라낼 때 사용하는데, 다른 점은 기존의 배열은 건들이지 않음.\t- 첫 번째 파라미터: 어떤 인덱스부터 자를지를 의미\t- 두 번째 파라미터: 어디까지 자를지를 의미const numbers = [10, 20, 30, 40];const sliced = numbers.slice(0, 2); // 0부터 시작해서 2전까지console.log(sliced); // [10, 20]console.log(numbers); // [10, 20, 30, 40]９.９ shift와 popshift(): 첫번째 원소를 배열에서 추출pop(): 마지막 원소를 배열에서 추출const numbers = [10, 20, 30, 40];const value = numbers.shift();console.log(value); // 10console.log(numbers); // [20, 30, 40]const numbers = [10, 20, 30, 40];const value = numbers.pop();console.log(value); // 40console.log(numbers); // [10, 20, 30]９.10 unshiftunshift(): shift() 의 반대로, 배열의 맨 앞에 새 원소를 추가const numbers = [10, 20, 30, 40];numbers.unshift(5);console.log(numbers);[5, 10, 20, 30, 40]９.11 concatconcat() : 여러개의 배열을 하나의 배열로 합침const arr1 = [1, 2, 3];const arr2 = [4, 5, 6];const concated = arr1.concat(arr2);console.log(concated); // [1,2,3,4,5,6]concat 함수는 arr1 과 arr2 에 변화를 주지 않음.９.12 joinjoin(): 배열 안의 값들을 문자열 형태로 합침const array = [1, 2, 3, 4, 5];console.log(array.join()); // 1,2,3,4,5console.log(array.join('')); // 12345console.log(array.join(' ')); // 1 2 3 4 5console.log(array.join(', ')); // 1, 2, 3, 4, 5９.13 reduce// 아 힘드러https://learnjs.vlpt.us/basics/09-array-functions.html" }, { "title": "절대경로와 상대경로", "url": "/posts/%EC%A0%88%EB%8C%80%EA%B2%BD%EB%A1%9C%EC%99%80-%EC%83%81%EB%8C%80%EA%B2%BD%EB%A1%9C/", "categories": "", "tags": "", "date": "2022-08-03 00:46:00 +0900", "snippet": "절대경로 어떠한 웹페이지나 파일이 가지고 있는 고유한 경로 예를들어 http://www.google.com, C:\\users\\document\\untitled.jpg 등을 모두 절대 경로라함상대경로 ‘현재 위치한 곳을 기준’으로 한 경로 다시한번 설명하자면 (Web이라고 기준하에) html 파일이 위치한 폴더를 기준으로 상대적인 경로라는 것. ’/’    -&gt; 가장 최상의 디렉토리로 이동한다.(Web root)  ’./’   -&gt; 파일이 현재 디렉토리를 의미한다.   ’../’  -&gt; 상위 디렉토리로 이동한다. 만약 두단계 상위 디렉토리로 이동하려면   ‘../../’ 이렇게 사용하면 된다. 출처: https://88240.tistory.com/122 [shaking blog:티스토리]" }, { "title": "윈도우 명령어 모음", "url": "/posts/%EC%9C%88%EB%8F%84%EC%9A%B0-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C/", "categories": "Application, Window", "tags": "window", "date": "2022-08-03 00:20:00 +0900", "snippet": "가상 데스크탑 단축키 모든 가상 데스크톱보기 : Windows Key + Tab 새 가상 데스크톱 만들기 : Windows Key + Ctrl + D 현재 가상 데스크톱 닫기 : Windows Key + Ctrl + F4 다음 가상 데스크톱으로 이동 : Windows Key + Ctrl + Right 이전 가상 데스크톱으로 이동 : Windows Key + Ctrl + Left" }, { "title": "자바 스크립트 기초 강좌 100분 완성 (유투브 )", "url": "/posts/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EC%B4%88-%EA%B0%95%EC%A2%8C-100%EB%B6%84-%EC%99%84%EC%84%B1/", "categories": "Programming, JavaScript", "tags": "javascript", "date": "2022-08-02 20:32:00 +0900", "snippet": "▶ 자바 스크립트 기초 강좌: 100분 완성자바스크립트 웹에디터 코드펜 링크１. 변수 ;(세미콜론): 한줄이 끝났다는 의미로 사용, 생략해도 되지만 항상 적는게 좋음 문자는 항상 따옴표로 감싸줌 (', \" 상관 없음) 예약어(Reserved Words)를 변수명으로 사용 불가 함수 2개 소개 alert() : 경고창을 띄우는 함수 console.log(): 변수 선언 실습 name= \"Mike\"; age = 30; name = \"Google\"; // Google로 덮어씌워짐 위와 같이 선언하는건 위험함. 팀 내 다른 개발자가 모르고 같은 이름으로 변수 선언 시 마지막으로 선언된 것으로 덮어씌워지게 됨 =&gt; 이를 방지하기 위한 2가지 변수 선언 키워드 존재 변수 선언 키워드 2가지: let, const (1) let 키워드 let name = \"Mike\"; // 최초로 변수 선언시 let을 붙임 let name = \"Google\"; // SyntaxError 발생 =&gt; 사용하는 변수 임을 알게됨 name = \"Google\"; // 한번 선언 후 다른 값으로 바꿀땐 let 생략 (2) const 키워드\t- 절대 바뀌지 않는 상수에 사용\t- 수정 시 에러 발생\t- 보통 대문자로 선언 const PI = 3.14; const SPEED_LIMIT = 50; 변수 선언 정리: 변수를 선언할 때 변하지 않는 값은 const, 변할 수 있는 값은 let으로 선언하여 의도치 않은 동작을 방지함 변수 선언 규칙 문자, 숫자, $, _ 만 사용 첫 글자는 숫자가 될 수 없음 예약어 사용 불가 가급적 상수는 대문자로 변수명은 읽기 쉽고 이해할 수 있게 선언 ２. 자료형２.１ 문자형 String１) 문자형 표현 방식 3가지const name1 = \"Mike\"; // 1 - 큰따옴표const name2 = 'Mike'; // 2 - 작은따옴표const name3 = `Mike`; // 3 - 백틱 큰따옴표와 작은 따옴표는 차이 없음 const message = \"I'm a boy.\"; //큰따옴표, 작은 따옴표 같이 쓰고 싶을 때 const message2 = 'I\\'m a boy.'; // 작은 따옴표만 쓰고 싶을 땐 \\를 앞에 넣어 특수문자로 인식하게 함 백틱은 문자열 내부에 변수를 표현해줄 때 사용하면 편리함 const name = \"Mike\"; const message3 = `My name is ${name}`; // 변수 삽입 console.log(message3); const message4 = `나는 ${30+1}살 입니다.` // 표현식 삽입 console.log(message4); \"My name is Mike\" \"나는 31살 입니다.\" 문자형 끼리 + 로 더하면 하나로 합쳐짐 숫자형과 문자형을 + 로 더하면 문자형으로 변경됨 ２.２ 숫자형 Numberconst age = 30;const PI = 3.14;console.log(1 + 2); // +, -, *, /(나누기), %(나머지) 가능 숫자를 0으로 나누면 Infinity가 출력됨 const x = 1/0; console.log(x) Infinity 문자를 숫자로 나누면 NaN(Not a Number) 출력됨 const name = \"Mike\"; const y = name/2; console.log(y) NaN ２.３ Boolean논리적인 요소를 나타냄. 참, 거짓 두가지const a = true; // 참const b = false; // 거짓const name = \"Mike\";const age = 30;console.log(name == 'Mike')console.log(age &gt; 40)truefalse２.４ null과 undefinednull: 존재하지 않는 값을 의미undefined: 값이 할당되지 않음을 의미let age;console.log(age) let user = null;console.log(user);undefinednull이 외에 객체형, 심볼형이 있는데 이것은 나중에 따로 만들겠음２.５ typeof 연산자변수의 자료형을 알아냄다른 개발자가 작성한 변수의 타입을 알아야하거나,API 통신을 통해 받아온 데이터를 type에 따라 다른 방식으로 처리해야 할 때 많이 사용됨typeof null; //\"object\"object형은 객체형을 의미하는데 사실 null은 객체가 아님.이건 자바스크립트 초기 버전의 오류인데 하위 호완성을 위해 수정하지 않는다함３. 대화상자３.１ alert()메시지를 띄움. 사용자가 확인 버튼을 누르면 닫힘일방적으로 알리는 용도로 사용３.２ prompt()사용자로부터 어떤 값을 입력 받을 때 사용함 취소를 누르면 null이 저장됨const name = prompt(\"이름을 입력하세요.\");alert(\"환영합니다, \" + name + \"님\"); alert(`안녕하세요, ${name}님. 환영합니다.`) 두 번째 변수에 기본값을 지정 가능 const name = prompt(\"예약일을 입력해주세요.\", \"2020-10-\"); ３.３ confirm()alert는 확인 버튼만 있지만 confirm은 확인과 취소 버튼이 함께 있음.확인을 누르면 변수에 true가 저장되고 취소를 누르면 false가 저장됨const isAdult = confirm(\"당신은 성인 입니까?\");console.log(isAdult)true３.４ 대화상자의 단점 창이 떠 있는 동안 스크립트가 일시 정지됨. 만약 유튜브에서 알림버튼을 눌렀을 때 text로 알려주는 게 아니라 alert창으로 알려준다면 누를 때마다 일일히 확인 버튼을 눌러서 꺼줘야함. 스타일링 불가능 위치와 모양 지정 불가 브라우저마다 모양이 조금씩 다름 (디자이너가 싫어함) 이런 단점에도 불구하고 빠르고 간단하게 적용 가능하기 때문에 굉장히 많이 사용됨４. 형변환(Type Conversion)자료형이 다르면 의도치 않은 결과가 나올 수 있음const mathScore = prompt(\"수학 몇점?\");const engScore = prompt(\"영어 몇점?\");const result = (mathScore + engScore) / 2;console.log(result)90점, 80점 입력 시 결과4540prompt 로 입력받은 결과는 문자형임.따라서 숫자 90이 아니라 문자 “90”임.문자와 문자를 더했으므로 “90” + “80” 은 170이 아니라 “9080”이 됨.“9080”/2 = 4540이 됨./ 나누기는 숫자형으로 자동 변환돼서 계산됨.(자동 형변환)자동 형변환은 원인을 찾기 힘든 에러를 발생시키므로 항상 의도를 가지고 원하는 타입으로 변환해주는 게 좋음. (명시적 형변환)４.１ String()문자형으로 변환함.제일 앞 글자는 대문자로 써야함４.２ Number()숫자형으로 변환함.숫자 아닌 문자가 들어있으면 NaN이 됨true, false를 Number()로 형변환 시키면 1, 0이 됨 주의사항) 아래의 경우는 그냥 외우는 수 밖에 없음 사용자로부터 prompt()로 나이를 입력받을때 그냥 취소 버튼을 누르면 null이 할당되고, Number(null)은 0이 됨. - 숫자 0은 false, 문자 ‘0’은 true임 - 빈문자열은 false, 공백이 들어가 있으면 true임 (버그없는 코드를 작성하려면 기억해야됨) ４.３ Boolean()boolean형으로 변환함.false로 변환되는 경우만 알아두면 됨. 숫자 0 빈문자열 ‘’ null undefined NaN위 값들은 false로 변환되고, 이 외에는 모두 true를 반환함４.４ 정리５. 연산자(Operators)５.１나머지(%)의 활용나머지 연산자는 생각보다 자주 사용되고 유용하다. 홀수, 짝수인 지 구분할 때 5보다 작은 수를 얻고 싶을 때 거듭제곱우선순위연산자 줄여서 쓰기let num = 10;num += 5; // num = num + 5; 와 동일 *=, -=, %= 도 가능증가 연산자 ++ , 감소 연산자 –let num = 10;let result1 = num++; // 증가시키기 전의 값을 result1에 넣음console.log(result1); // 10let num = 10;let result2 = ++num; // 증가시킨 값을 result2에 넣음console.log(result2); // 11비교 연산자, 조건문 비교 연산자 29:44 까지 들었는데 비효율적인 것 같아.. 멈춤 " }, { "title": "obsidian 설정", "url": "/posts/obsidian-%EC%84%A4%EC%A0%95/", "categories": "Application, Github blog", "tags": "obsidian", "date": "2022-08-01 15:04:00 +0900", "snippet": "typora 처럼 위치 지정해서 쓰기[obsidian-custom-attachment github]typora처럼 이미지나 파일을 넣을 때 자동으로 현재 파일명으로 폴더를 생성해넣도록 하는 플러그인이다.설치 방법과 사용법은 깃헙에 있다.요청사항이 있다면 한국어로 번역하겠다." }, { "title": "github blog 관련 명령어 모음", "url": "/posts/github-blog-%EA%B4%80%EB%A0%A8-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C/", "categories": "Application, Github blog", "tags": "github blog, github io", "date": "2022-08-01 11:21:00 +0900", "snippet": "서버 실행 단축키bundle exec jekyll serve(로컬 서버 링크)글 작성 단축키(jekyll-compose 깃헙 링크)bundle exec jekyll post \"My New Post\"(마크다운 문서 작성법 링크)" }, { "title": "github blog 개설 방법", "url": "/posts/github-blog-%EA%B0%9C%EC%84%A4/", "categories": "Application, Github blog", "tags": "", "date": "2022-07-28 03:02:00 +0900", "snippet": "１. github 블로그 개설 방법초보자를 위한 GitHub Blog 만들기 - 1위 링크는 이 블로그를 개설할 때 참고한 21년 10월 16일 게시글이다. 이미지가 많지 않아 왕초보에겐 적합하지 않을 것 같다..window, 64bit 기준, vsc, github desktop 앱을 사용한다.위 블로그 링크와 다르게 한 점은 ruby 다운 받을 때 제일 최신 버전을 이용하였다.나중에 찾아보니 jekyll theme가 구버전과 호환이 된다는 글이 있으니, 블로그 글 그대로 이용하는 게 좋겠다. (근데 나는 아직 호환이 안되는 문제는 발생하지 않았다)또한 댓글 기능으로 disqus를 이용하지 않고 utterance 를 이용했다.disqus는 무겁고 광고가 많이 뜬다는 단점이 있다utterance 댓글 연동은 이 블로그(링크)가 잘 설명해주고 있다나는 chirpy theme를 적용했다. (chirpy theme link )이 테마에서 맘에 든 점은 왼쪽 카테고리창을 고정할 수 있는 기능 우측에 카테고리 기능 동적으로 크기 조절그 외에 맘에 든 테마는 이 테마.. 근데 많은 글을 쓰는 블로그엔 적합하지 않는 듯함２. 오류 발생 사항２.１ Conflict: c:/github exists and is not empty.jekyll new . 할 경우 Conflict: c:/github exists and is not empty. 이런 식의 에러가 났다. jekyll new . --force 하면 된다. 이 명령어를 쓰면 폴더를 강제로 덮어쓰게되는데 문제 없다２.２ `require’: cannot load such file – webrick (LoadError)루비 cmd 창에 bundle add webrick 명령어를 친다.(참고링크)２.３— layout: home # Index page —로컬 환경에서는 테마가 정상적으로 적용되는데웹사이트에서는 — layout: home # Index page — 이런 텍스트(index.html 파일 내용)만 뜨는 경우이다.본인 깃헙 블로그 레포지토리에서 Setting - Pages에 가면 Source에서 Branch를 바꿀 수 있는데 여기서 gh-pages, /(root)를 선택하고 Save를 누른다.3-5분 기다리면 블로그가 정상적으로 뜬다２.４ 404 error깃헙 레포 visibility를 private으로 바꿨다가 블로그가 정상적으로 안떠서 (private으로 블로그를 운영하고 싶으면 enterprise plan을 써야한다고함..) public으로 다시 바꿨더니 404 에러가 발생했다.본인 깃헙 블로그 레포지토리에서 Setting - Pages에 갔더니 Branch 설정이 풀려있어서 다시gh-pages, /(root)를 선택하고 Save를 눌렀다.그래도 여전히 404 에러가 떴다…검색해보니 현재 블로그 코드를 commit후 push를 하면 접속이 된다고 한다.아마 푸시가 발생할때 github pages 에서 빌드가 발생하는 거 같다고 한다..그러나 이 방법으로 되지 않았다.내가 해결한 방법은https://[사용자명].github.io/ 뒤에 index.html을 붙였더니 페이지에 접속이 됐다.이 이후로는 index.html을 붙이지 않아도 접속이 정상적으로 된다.２.５ 이미지가 뜨지 않음구글에 지킬 이미지 넣기를 검색해보면다들 루트 폴더에 images폴더를 생성해 이미지를 넣고![](/images/사진.jpg) 이런 식으로 이미지 주소를 상대경로로 지정하는 데 나는 죽어도 사진이 안떴었다..아래처럼 깃헙 주소까지 포함해서 절대 경로로 지정해주는 경우에만 사진이 제대로 떴다.![Image8](https://sonmansu.github.io/images/의자.jpg) 하지만 이미지 경로를 일일히 지정해주는 게 귀찮아서..지킬 블로그 설명 문서를 다시 읽어보다가 해결 방법을 찾아냈다._config.yml 파일에# img_cdn: 'https://raw.githubusercontent.com/cotes2020/chirpy-images/main'img_cdn을 주석시키면 된다.이 cdn 주소가 ‘/’가 붙은 모든 경로 앞에 붙어있었기 때문에 이미지가 안떴었던 것이다.위 주소를 주석시키고 나면avatar(대표사진으로 쓰일 이미지 파일) 경로를 재지정하라는 오류가 뜨는데 그거는 avatar에 지정돼있던 이미지가 위 경로에서 가져온 이미지 이기 때문이다._config.yml 에avatar 경로를 재지정 해준다. 일반적으로 /assets/img/ 폴더에 이미지를 넣고 불러 쓴다.avatar: '/assets/img/myicon.png'３. 추가 팁３.１ VSC를 마크다운 편집기로 사용하는 방법Markdown All in One 플러그인을 설치해서 사용한다.(참고링크)４. 의문점chirpy 테마에서는 게시물 오른쪽 옆에 목차가 붙는다. (정식용어는 Table Of Contents를 줄여서 toc라고 부른다) jekyll에서 샘플로 주어진 게시물에서는 스크롤할 때마다 목차가 움직이는데 내가 작성한 게시물엔 목차가 안움직여서 계속 찾아봤더니# 안녕? // 목차가 정상적으로 움직임# 1. 안녕? // 앞에 숫자를 붙이면 목차가 움직이지 않음# １. 안녕? // 야매 방법(ㅈ+한자)으로 숫자를 붙여서 목차를 움직임태그 옆에 숫자를 붙이면 목차가 안움직인다… 해결방법은 못찾겠다 ㅠ일단 ㅈ+한자를 누르면 숫자 이모티콘을 사용할 수 있는데 이 방법으로 넘버링을 하기로 결정.." }, { "title": "Welcome to Jekyll!", "url": "/posts/welcome-to-jekyll/", "categories": "jekyll, update", "tags": "", "date": "2022-07-28 01:23:48 +0900", "snippet": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name) puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Application, Github blog", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Application, Github blog", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Application, Github blog", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Application, Github blog", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Application, Github blog", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
